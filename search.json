[{"path":"https://nkoenen.github.io/Survinng/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Niklas Koenen Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"generate-the-data","dir":"Articles","previous_headings":"","what":"Generate the Data","title":"Simulation of Time-dependent Effects","text":"consider simulated dataset following characteristics: 9,500 samples used training 500 samples used testing X1‚àºN(0,1)X_1 \\sim N(0, 1): time-dependent effect hazard: Initially negative effect Later transitions positive effect(implies opposite effect survival probability) X2‚àºùí©(0,1)X_2 \\sim \\mathcal{N}(0, 1): positive effect hazard ‚Üí Negative effect survival X3‚àºùí∞(0,1)X_3 \\sim \\mathcal{U}(0, 1): strong negative effect hazard ‚Üí Positive effect survival X4‚àºùí∞(‚àí1,1)X_4 \\sim \\mathcal{U}(-1, 1): effect hazard survival","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"load-models-and-data","dir":"Articles","previous_headings":"","what":"Load Models and Data","title":"Simulation of Time-dependent Effects","text":"models used vignette used main paper. models trained using survivalmodels package, training process shown , can found vignettes/articles/Sim_time_dependent directory.","code":"# Load data train <- readRDS(here(\"vignettes/articles/Sim_time_dependent/train.rds\")) test <- readRDS(here(\"vignettes/articles/Sim_time_dependent/test.rds\")) dat <- rbind(train, test)  # Load extracted models ext_coxtime <- readRDS(here(\"vignettes/articles/Sim_time_dependent/extracted_model_coxtime.rds\")) ext_deepsurv <- readRDS(here(\"vignettes/articles/Sim_time_dependent/extracted_model_deepsurv.rds\")) ext_deephit <- readRDS(here(\"vignettes/articles/Sim_time_dependent/extracted_model_deephit.rds\"))"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"create-explainer","dir":"Articles","previous_headings":"","what":"Create Explainer","title":"Simulation of Time-dependent Effects","text":"explain() function creates explainer object survival models. data argument specifies dataset used explanation, model argument specifies model explained. target argument indicates type prediction explained (e.g., ‚Äúsurvival‚Äù, ‚Äúrisk‚Äù, ‚Äúcumulative hazard‚Äù).","code":"exp_deephit <- Survinng::explain(ext_deephit[[1]], data = test) exp_coxtime <- Survinng::explain(ext_coxtime[[1]], data = test) exp_deepsurv <- Survinng::explain(ext_deepsurv[[1]], data = test)"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"Simulation of Time-dependent Effects","text":"performance models evaluated using C-Index Integrated Brier Score (IBS). C-Index measures concordance predicted observed survival times, IBS quantifies accuracy survival predictions.","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"kaplan-meier-survival-curves","dir":"Articles","previous_headings":"","what":"Kaplan-Meier Survival Curves","title":"Simulation of Time-dependent Effects","text":"Kaplan-Meier survival curves plotted visualize survival probabilities time. x1 variable categorized two groups (low high) based median value. survival curves plotted group.","code":"# Categorize `x1` into bins (e.g., low, medium, high) dat$x1_group <- cut(dat$x1,                      breaks = quantile(dat$x1, probs = c(0, 0.5, 1)),                      labels = c(\"Low\", \"High\"),                      include.lowest = TRUE)  # Create a Surv object surv_obj <- Surv(dat$time, dat$status)  # Fit Kaplan-Meier survival curves stratified by `x1_group` km_fit <- survfit(surv_obj ~ x1_group, data = dat)  # Plot the KM curves km_plot <- ggsurvplot(km_fit,                        data = dat,                       xlab = \"Time t\",                       ylab = \"Survival Probability\",                       legend.title = \"x1 Group\",                       palette = c(\"#377EB8\", \"#E69F00\"),                         title = \"\")  km_plot$plot <- km_plot$plot +    theme_minimal(base_size = 17) +   theme(legend.position = \"bottom\") +   geom_rug(data = test, aes(x = time), sides = \"bl\", linewidth = 0.5, alpha = 0.5, inherit.aes = FALSE) km_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"survival-prediction","dir":"Articles","previous_headings":"Kaplan-Meier Survival Curves","what":"Survival Prediction","title":"Simulation of Time-dependent Effects","text":"survival predictions test dataset computed using predict() function. type argument specifies type prediction made (e.g., ‚Äúsurvival‚Äù, ‚Äúrisk‚Äù, ‚Äúcumulative hazard‚Äù). survival predictions plotted set instances interest.","code":"# Print instances of interest td_ids <- c(79, 428) print(test[td_ids, ]) #>          time status        x1         x2         x3         x4 #> 1535 4.306154      1 0.1934749 -0.3069111 -0.1475012  0.6370386 #> 8202 1.417212      1 0.7526954 -0.3781274 -1.1500862 -0.6418508  # Compute Vanilla Gradient grad_cox <- surv_grad(exp_coxtime, target = \"survival\", instance = td_ids) grad_deephit <- surv_grad(exp_deephit, target = \"survival\", instance = td_ids) grad_deepsurv <- surv_grad(exp_deepsurv, target = \"survival\", instance = td_ids)  # Plot survival predictions surv_plot <- cowplot::plot_grid(   plot_surv_pred(grad_cox) ,   plot_surv_pred(grad_deephit),   plot_surv_pred(grad_deepsurv),   nrow = 1, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\"),   label_x = 0.03,         label_size = 14)  surv_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"explainable-ai","dir":"Articles","previous_headings":"","what":"Explainable AI","title":"Simulation of Time-dependent Effects","text":"following sections demonstrate application various gradient-based explanation methods survival models. methods include Grad(t), SmoothGrad(t), IntGrad(t), GradSHAP(t), corresponding plots shown main body paper.","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"gradt-sensitivity","dir":"Articles","previous_headings":"Explainable AI","what":"Grad(t) (Sensitivity)","title":"Simulation of Time-dependent Effects","text":"compute gradient survival predictions respect input features. surv_grad() function computes gradients specified instances.","code":"# Plot attributions grad_plot <- cowplot::plot_grid(   plot_attribution(grad_cox, label = \"Grad(t)\") ,   plot_attribution(grad_deephit, label = \"Grad(t)\"),   plot_attribution(grad_deepsurv, label = \"Grad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) grad_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"smoothgradt-sensitivity","dir":"Articles","previous_headings":"Explainable AI","what":"SmoothGrad(t) (Sensitivity)","title":"Simulation of Time-dependent Effects","text":"SmoothGrad(t) method adds noise input features computes average gradient multiple noisy samples. approach helps reduce noise gradient estimates provides clearer picture feature importance.  relevance curves derived output-sensitive methods effectively reveal time-dependent effect x1x_1 survival predictions, indicating positive effect earlier times negative effect later . time-dependent effect accurately captured CoxTime DeepHit, DeepSurv, inherently constrained PH assumption thus unable model time-dependence.","code":"# Compute SmoothGrad sg_cox <- surv_smoothgrad(exp_coxtime, target = \"survival\", instance = td_ids,                            n = 50, noise_level = 0.1) sg_deephit <- surv_smoothgrad(exp_deephit, target = \"survival\", instance = td_ids,                                n = 50, noise_level = 0.1) sg_deepsurv <- surv_smoothgrad(exp_deepsurv, target = \"survival\", instance = td_ids,                                 n = 50, noise_level = 0.1)  # Plot attributions smoothgrad_plot <- cowplot::plot_grid(   plot_attribution(sg_cox, label = \"SG(t)\"),    plot_attribution(sg_deephit, label = \"SG(t)\"),    plot_attribution(sg_deepsurv, label = \"SG(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) smoothgrad_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"intgradt","dir":"Articles","previous_headings":"Explainable AI","what":"IntGrad(t)","title":"Simulation of Time-dependent Effects","text":"IntGrad(t) method computes integral gradients along straight line path reference point input instance. method provides comprehensive view feature importance considering cumulative effect features time. addition time-dependence feature effects, difference--reference methods (.e., IntGrad(t) GradSHAP(t)) provide insights relative scale, direction, magnitude feature effects comparing predictions meaningful reference.","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"zero-baseline-should-be-proportional-to-gradient-x-input","dir":"Articles","previous_headings":"Explainable AI > IntGrad(t)","what":"Zero baseline (should be proportional to Gradient x Input)","title":"Simulation of Time-dependent Effects","text":"zero baseline reference point features set zero.   effectively visualize normalized absolute contribution feature difference reference (survival) prediction time.  Complementarily, emphasize relative contribution direction feature set representative survival times.","code":"# Compute IntegratedGradient with 0 baseline x_ref <- matrix(c(0,0,0,0), nrow = 1) ig0_cox <- surv_intgrad(exp_coxtime, instance = td_ids, n = 50, x_ref = x_ref) ig0_deephit <- surv_intgrad(exp_deephit, instance = td_ids, n = 50, x_ref = x_ref) ig0_deepsurv <- surv_intgrad(exp_deepsurv, instance = td_ids, n = 50, x_ref = x_ref)  # Plot attributions intgrad0_plot <- cowplot::plot_grid(   plot_attribution(ig0_cox, label = \"IntGrad(t)\"),    plot_attribution(ig0_deephit, label = \"IntGrad(t)\"),    plot_attribution(ig0_deepsurv, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot # Plot attributions intgrad0_plot_comp <- cowplot::plot_grid(   plot_attribution(ig0_cox, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(ig0_deephit, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(ig0_deepsurv, add_comp = TRUE, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_comp # Plot contributions intgrad0_plot_contr <- cowplot::plot_grid(   plot_contribution(ig0_cox, scale = 0.9, label = \"IntGrad(t)\"),    plot_contribution(ig0_deephit, scale = 0.9, label = \"IntGrad(t)\"),    plot_contribution(ig0_deepsurv, scale = 0.9, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_contr # Plot force intgrad0_plot_force <- cowplot::plot_grid(   plot_force(ig0_cox, zero_feature = \"x4\", upper_distance = 0, lower_distance = 0, lower_distance_x1 = 0.05, intgrad0_td_cox = TRUE, label = \"IntGrad(t)\"),    plot_force(ig0_deephit, zero_feature = \"x4\", upper_distance = 0, lower_distance = 0, lower_distance_x1 = 0.02, label = \"IntGrad(t)\"),     plot_force(ig0_deepsurv, zero_feature = \"x4\", upper_distance = 0, lower_distance = 0, intgrad0_td_deepsurv = TRUE, label = \"IntGrad(t)\"),    nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_force"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"gradshapt","dir":"Articles","previous_headings":"Explainable AI","what":"GradShap(t)","title":"Simulation of Time-dependent Effects","text":"GradSHAP(t) method computes SHAP values survival predictions. provides measure contribution feature survival predictions, taking account time-dependent effects.     example, opposite effects low vs.¬†high values x1x_1 effectively captured plots. observation 79, low x1x_1 positively influences survival later time points (t>2t>2) compared overall average survival dataset, resulting largest contributions occurring times. Conversely, observation 428, high x1x_1 induces substantial contributions earlier time points (t<2t<2), negatively impacts survival later times, reflecting early event consequence high x1x_1 strong negative effect x3x_3. average normalized absolute contribution, displayed right side contribution plots, offers time-independent measure feature importance, confirming dominance x3x_3 survival prediction instance 428. Additionally, visualizations suggest CoxTime partially attributes time-varying effect x1x_1 features, model, non-parametric lacking explicit knowledge time-dependent functional form, struggles precisely disentangle localize effect.","code":"# Compute GradShap(t) gshap_cox <- surv_gradSHAP(exp_coxtime, instance = td_ids, n = 50, num_samples = 100) gshap_deephit <- surv_gradSHAP(exp_deephit, instance = td_ids, n = 50, num_samples = 100) gshap_deepsurv <- surv_gradSHAP(exp_deepsurv, instance = td_ids, n = 50, num_samples = 100)  # Plot attributions gshap_plot <- cowplot::plot_grid(   plot_attribution(gshap_cox, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deephit, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deepsurv, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot # Plot attributions gshap_plot_comp <- cowplot::plot_grid(   plot_attribution(gshap_cox, add_comp = TRUE, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deephit, add_comp = TRUE, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deepsurv, add_comp = TRUE, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_comp # Plot contributions gshap_plot_contr <- cowplot::plot_grid(   plot_contribution(gshap_cox, scale = 0.9, label = \"GradSHAP(t)\"),    plot_contribution(gshap_deephit, scale = 0.9, label = \"GradSHAP(t)\"),    plot_contribution(gshap_deepsurv, scale = 0.9, label = \"GradSHAP(t)\"),    nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_contr # Plot force gshap_plot_force <- cowplot::plot_grid(   plot_force(gshap_cox, upper_distance = 0, lower_distance = 0, zero_feature = \"x4\", gradshap_td_cox = TRUE, label = \"GradSHAP(t)\"),    plot_force(gshap_deephit, upper_distance = 0, lower_distance = 0, zero_feature = \"x4\", gradshap_td_deephit = TRUE, label = \"GradSHAP(t)\"),    plot_force(gshap_deepsurv, upper_distance = 0, lower_distance = 0, zero_feature = \"x4\", gradshap_td_deepsurv = TRUE, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_force"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_dependent.html","id":"main-paper-plots","dir":"Articles","previous_headings":"","what":"Main paper plots","title":"Simulation of Time-dependent Effects","text":"plots can found main body ‚ÄúGradient-based Explanations Deep Learning Survival Models‚Äù (2025) S.H. Langbein, N. Koenen M. N. Wright.","code":"# Plot attributions grad_deephit_plot <- plot_attribution(grad_deephit, label = \"Grad(t)\") grad_deephit_plot # Plot force gshap_coxtime_plot <- cowplot::plot_grid(   plot_attribution(gshap_cox, add_comp = TRUE, label = \"GradSHAP(t)\"),    plot_contribution(gshap_cox, scale = 0.9, label = \"GradSHAP(t)\"),   plot_force(gshap_cox, upper_distance = 0, lower_distance = 0, zero_feature = \"x4\", gradshap_td_cox = TRUE, label = \"GradSHAP(t)\"),    nrow = 3, labels = c(\"CoxTime\", \"CoxTime\", \"CoxTime\")) gshap_coxtime_plot"},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"generate-the-data","dir":"Articles","previous_headings":"","what":"Generate the data","title":"Simulation of Time-independent Effects","text":"Simulation setting: - 10,00010,000 samples (9,5009,500 training, 500500 testing) - time-dependent effects - X1‚àºùí©(0,1)X_1 \\sim \\mathcal{N}(0,1) positive effect hazard -> negative effect survival - X2‚àºùí∞(0,1)X_2 \\sim \\mathcal{U}(0,1) stronger negative effect hazard -> positive effect survival - X3‚àºùí∞(‚àí1,1)X_3 \\sim \\mathcal{U}(-1,1) effect","code":""},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"load-models-and-data","dir":"Articles","previous_headings":"","what":"Load Models and Data","title":"Simulation of Time-independent Effects","text":"","code":"# Load data train <- readRDS(here(\"vignettes/articles/Sim_time_independent/train.rds\")) test <- readRDS(here(\"vignettes/articles/Sim_time_independent/test.rds\")) dat <- rbind(train, test)  # Load extracted models ext_coxtime <- readRDS(here(\"vignettes/articles/Sim_time_independent/ext_coxtime.rds\")) ext_deepsurv <- readRDS(here(\"vignettes/articles/Sim_time_independent/ext_deepsurv.rds\")) ext_deephit <- readRDS(here(\"vignettes/articles/Sim_time_independent/ext_deephit.rds\"))"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"create-explainer","dir":"Articles","previous_headings":"","what":"Create Explainer","title":"Simulation of Time-independent Effects","text":"","code":"exp_deephit <- Survinng::explain(ext_deephit[[1]], data = test) exp_coxtime <- Survinng::explain(ext_coxtime[[1]], data = test) exp_deepsurv <- Survinng::explain(ext_deepsurv[[1]], data = test)"},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"survival-prediction","dir":"Articles","previous_headings":"Performance","what":"Survival Prediction","title":"Simulation of Time-independent Effects","text":"","code":"# Print instances of interest tid_ids <- c(13, 387) print(test[tid_ids, ]) #>           time status        x1        x2          x3 #> 343  2.6653596      1 -0.434617 0.1162303 -0.08053765 #> 7906 0.9577924      1  2.454611 0.2462072 -0.04249294  # Compute Vanilla Gradient grad_cox <- surv_grad(exp_coxtime, target = \"survival\", instance = tid_ids) grad_deephit <- surv_grad(exp_deephit, target = \"survival\", instance = tid_ids) grad_deepsurv <- surv_grad(exp_deepsurv, target = \"survival\", instance = tid_ids)  # Plot survival predictions surv_plot <- cowplot::plot_grid(   plot_surv_pred(grad_cox) ,   plot_surv_pred(grad_deephit),   plot_surv_pred(grad_deepsurv),   nrow = 1, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\"),   label_x = 0.03,         label_size = 14)  surv_plot"},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"gradient-sensitivity","dir":"Articles","previous_headings":"Explainable AI","what":"Gradient (Sensitivity)","title":"Simulation of Time-independent Effects","text":"","code":"# Plot attributions grad_plot <- cowplot::plot_grid(   plot_attribution(grad_cox, label = \"Grad(t)\") ,   plot_attribution(grad_deephit, label = \"Grad(t)\"),   plot_attribution(grad_deepsurv, label = \"Grad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) grad_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"smoothgrad-sensitivity","dir":"Articles","previous_headings":"Explainable AI","what":"SmoothGrad (Sensitivity)","title":"Simulation of Time-independent Effects","text":"","code":"# Compute SmoothGrad sg_cox <- surv_smoothgrad(exp_coxtime, target = \"survival\", instance = tid_ids, n = 50, noise_level = 0.1) sg_deephit <- surv_smoothgrad(exp_deephit, target = \"survival\", instance = tid_ids, n = 50, noise_level = 0.1) sg_deepsurv <- surv_smoothgrad(exp_deepsurv, target = \"survival\", instance = tid_ids, n = 50, noise_level = 0.1)  # Plot attributions smoothgrad_plot <- cowplot::plot_grid(   plot_attribution(sg_cox, label = \"SG(t)\"),    plot_attribution(sg_deephit, label = \"SG(t)\"),    plot_attribution(sg_deepsurv, label = \"SG(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) smoothgrad_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"gradient-x-input","dir":"Articles","previous_headings":"Explainable AI","what":"Gradient x Input","title":"Simulation of Time-independent Effects","text":"","code":"# Compute GradientxInput gradin_cox <- surv_grad(exp_coxtime, instance = tid_ids, times_input = TRUE) gradin_deephit <- surv_grad(exp_deephit, instance = tid_ids, times_input = TRUE) gradin_deepsurv <- surv_grad(exp_deepsurv, instance = tid_ids, times_input = TRUE)  # Plot attributions gradin_plot <- cowplot::plot_grid(   plot_attribution(gradin_cox, label = \"GxI(t)\"),    plot_attribution(gradin_deephit, label = \"GxI(t)\"),    plot_attribution(gradin_deepsurv, label = \"GxI(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gradin_plot # Plot attributions grad_gradin_plot <- cowplot::plot_grid(   plot_attribution(grad_deepsurv, label = \"Grad(t)\") ,   plot_attribution(gradin_deepsurv, label = \"GxI(t)\"),   nrow = 2, labels = c(\"DeepSurv\", \"DeepSurv\")) grad_gradin_plot"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"smoothgrad-x-input","dir":"Articles","previous_headings":"Explainable AI","what":"SmoothGrad x Input","title":"Simulation of Time-independent Effects","text":"","code":"# Compute SmoothGradxInput sgin_cox <- surv_smoothgrad(exp_coxtime, instance = tid_ids, n = 50, noise_level = 0.3,                           times_input = TRUE) sgin_deephit <- surv_smoothgrad(exp_deephit, instance = tid_ids, n = 50, noise_level = 0.3,                               times_input = TRUE) sgin_deepsurv <- surv_smoothgrad(exp_deepsurv, instance = tid_ids, n = 50, noise_level = 0.3,                                times_input = TRUE)  # Plot attributions smoothgradin_plot <- cowplot::plot_grid(   plot_attribution(sgin_cox, label = \"SGxI(t)\"),    plot_attribution(sgin_deephit, label = \"SGxI(t)\"),    plot_attribution(sgin_deepsurv, label = \"SGxI(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) smoothgradin_plot"},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"zero-baseline-should-be-proportional-to-gradient-x-input","dir":"Articles","previous_headings":"","what":"Zero baseline (should be proportional to Gradient x Input)","title":"Simulation of Time-independent Effects","text":"","code":"# Compute IntegratedGradient with 0 baseline x_ref <- matrix(c(0,0,0), nrow = 1) ig0_cox <- surv_intgrad(exp_coxtime, instance = tid_ids, n = 50, x_ref = x_ref) ig0_deephit <- surv_intgrad(exp_deephit, instance = tid_ids, n = 50, x_ref = x_ref) ig0_deepsurv <- surv_intgrad(exp_deepsurv, instance = tid_ids, n = 50, x_ref = x_ref)  # Plot attributions intgrad0_plot <- cowplot::plot_grid(   plot_attribution(ig0_cox, label = \"IntGrad(t)\"),    plot_attribution(ig0_deephit, label = \"IntGrad(t)\"),    plot_attribution(ig0_deepsurv, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot # Plot attributions intgrad0_plot_comp <- cowplot::plot_grid(   plot_attribution(ig0_cox, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(ig0_deephit, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(ig0_deepsurv, add_comp = TRUE, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_comp # Plot contributions intgrad0_plot_contr <- cowplot::plot_grid(   plot_contribution(ig0_cox, label = \"IntGrad(t)\"),    plot_contribution(ig0_deephit, label = \"IntGrad(t)\"),    plot_contribution(ig0_deepsurv, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_contr # Plot force intgrad0_plot_force <- cowplot::plot_grid(   plot_force(ig0_cox, upper_distance = 0.04, lower_distance = 0.04, label = \"IntGrad(t)\"),    plot_force(ig0_deephit, upper_distance = 0.02, lower_distance = 0, label = \"IntGrad(t)\"),    plot_force(ig0_deepsurv, upper_distance = 0.04, lower_distance = 0.04, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgrad0_plot_force"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"mean-baseline","dir":"Articles","previous_headings":"","what":"Mean baseline","title":"Simulation of Time-independent Effects","text":"","code":"# Compute IntegratedGradient with mean baseline x_ref <- NULL # default: feature-wise mean igm_cox <- surv_intgrad(exp_coxtime, instance = tid_ids, n = 50, x_ref = x_ref) igm_deephit <- surv_intgrad(exp_deephit, instance = tid_ids, n = 50, x_ref = x_ref) igm_deepsurv <- surv_intgrad(exp_deepsurv, instance = tid_ids, n = 50, x_ref = x_ref)  # Plot attributions intgradmean_plot <- cowplot::plot_grid(   plot_attribution(igm_cox, label = \"IntGrad(t)\"),    plot_attribution(igm_deephit, label = \"IntGrad(t)\"),    plot_attribution(igm_deepsurv, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgradmean_plot # Plot attributions intgradmean_plot_comp <- cowplot::plot_grid(   plot_attribution(igm_cox, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(igm_deephit, add_comp = TRUE, label = \"IntGrad(t)\"),    plot_attribution(igm_deepsurv, add_comp = TRUE, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgradmean_plot_comp # Plot contributions intgradm_plot_contr <- cowplot::plot_grid(   plot_contribution(igm_cox, label = \"IntGrad(t)\"),    plot_contribution(igm_deephit, label = \"IntGrad(t)\"),    plot_contribution(igm_deepsurv, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgradm_plot_contr # Plot force intgradm_plot_force <- cowplot::plot_grid(   plot_force(igm_cox, upper_distance = 0, lower_distance = 0, label = \"IntGrad(t)\"),    plot_force(igm_deephit, upper_distance = 0, lower_distance = 0, label = \"IntGrad(t)\"),    plot_force(igm_deepsurv, upper_distance = 0, lower_distance = 0, label = \"IntGrad(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) intgradm_plot_force"},{"path":"https://nkoenen.github.io/Survinng/articles/Sim_time_independent.html","id":"gradshap","dir":"Articles","previous_headings":"Mean baseline","what":"GradShap","title":"Simulation of Time-independent Effects","text":"","code":"# Compute GradShap gshap_cox <- surv_gradSHAP(exp_coxtime, instance = tid_ids, n = 50, num_samples = 100) gshap_deephit <- surv_gradSHAP(exp_deephit, instance = tid_ids, n = 50, num_samples = 100) gshap_deepsurv <- surv_gradSHAP(exp_deepsurv, instance = tid_ids, n = 50, num_samples = 100)  # Plot attributions gshap_plot <- cowplot::plot_grid(   plot_attribution(gshap_cox, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deephit, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deepsurv, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot # Plot attributions gshap_plot_comp <- cowplot::plot_grid(   plot_attribution(gshap_cox, add_comp = TRUE, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deephit, add_comp = TRUE, label = \"GradSHAP(t)\"),    plot_attribution(gshap_deepsurv, add_comp = TRUE, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_comp # Plot contributions % gshap_plot_contr <- cowplot::plot_grid(   plot_contribution(gshap_cox, label = \"GradSHAP(t)\"),    plot_contribution(gshap_deephit, label = \"GradSHAP(t)\"),    plot_contribution(gshap_deepsurv, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_contr # Plot force gshap_plot_force <- cowplot::plot_grid(   plot_force(gshap_cox, upper_distance = 0, lower_distance = 0, lower_distance_x1 = 0.05, label = \"GradSHAP(t)\"),    plot_force(gshap_deephit, upper_distance = 0, lower_distance = 0, lower_distance_x1 = 0.02, label = \"GradSHAP(t)\"),    plot_force(gshap_deepsurv, upper_distance = 0, lower_distance = 0, lower_distance_x1 = 0.04, label = \"GradSHAP(t)\"),   nrow = 3, labels = c(\"CoxTime\", \"DeepHit\", \"DeepSurv\")) gshap_plot_force"},{"path":"https://nkoenen.github.io/Survinng/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Niklas Koenen. Author, maintainer. Sophie Hanna Langbein. Author.","code":""},{"path":"https://nkoenen.github.io/Survinng/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koenen N, Langbein SH (2025). Survinng: Gradient-Based Feature Attribution Survival Neural Networks. R package version 0.0.1, https://nkoenen.github.io/Survinng/.","code":"@Manual{,   title = {Survinng: Gradient-Based Feature Attribution for Survival Neural Networks},   author = {Niklas Koenen and Sophie Hanna Langbein},   year = {2025},   note = {R package version 0.0.1},   url = {https://nkoenen.github.io/Survinng/}, }"},{"path":"https://nkoenen.github.io/Survinng/index.html","id":"survinng-gradient-based-explanations-for-deep-learning-survival-models","dir":"","previous_headings":"","what":"Gradient-Based Feature Attribution for Survival Neural Networks","title":"Gradient-Based Feature Attribution for Survival Neural Networks","text":"package Survinng provides gradient-based feature attribution methods deep learning survival models. implements novel adaptions model-specific XAI methods survival analysis domain, like Grad(t), SG(t), GxI(t), IntGrad(t), GradSHAP(t). whole package designed compatible survivalmodels package R, R wrapper pycox Python package. However, can also used models pycox directly survival models loaded torch. Currently, package supports models types DeepSurv/CoxPH, DeepHit, CoxTime.","code":""},{"path":"https://nkoenen.github.io/Survinng/index.html","id":"id_-why-survinng","dir":"","previous_headings":"","what":"üöÄ Why Survinng?","title":"Gradient-Based Feature Attribution for Survival Neural Networks","text":"Survinng, get: ‚è± Model-specific time-resolved feature attributions individuals ‚ö°Ô∏è Fast scalable explanations using model gradients, especially SHAP-like explanations ü§ù Compatible survivalmodels pycox models üìä Easy--use visualization tools temporal insights üîÄ Support multimodal inputs (e.g., tabular + image) Overall, package part following ICML‚Äô25 paper: üìÑ Based ICML 2025 paper:Gradient-based Explanations Deep Learning Survival ModelsSophie Hanna Langbein, Niklas Koenen, Marvin N. Wright","code":""},{"path":"https://nkoenen.github.io/Survinng/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"üì¶ Installation","title":"Gradient-Based Feature Attribution for Survival Neural Networks","text":"install latest development version directly GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"nkoenen/Survinng\")"},{"path":"https://nkoenen.github.io/Survinng/index.html","id":"id_-usage","dir":"","previous_headings":"","what":"üìñ Usage","title":"Gradient-Based Feature Attribution for Survival Neural Networks","text":"trained survival neural network model survivalmodels pycox model input data data. Now want interpret individual data points using methods package Survinng, stick following pseudo code:","code":"library(Survinng)  # Load a survival model and corresponding data model <- ... (e.g., from survivalmodels or pycox) data <- ... (e.g., the test set of the model)  # Create explainer object explainer <- Survinng::explain(model, data)  # Compute feature attributions idx <- 1 # index of the instance to explain grad <- surv_grad(explainer, instance = idx) # Grad(t) sg <- surv_smoothgrad(explainer, instance = idx) # SG(t) gxi <- surv_grad(explainer, instance = idx, times_input = TRUE) # GxI(t) ig <- surv_intgrad(explainer, instance = idx) # IntGrad(t) shap <- surv_gradSHAP(explainer, instance = idx) # GradSHAP(t)  # Plot results plot(shap)"},{"path":"https://nkoenen.github.io/Survinng/index.html","id":"id_-citation","dir":"","previous_headings":"","what":"üìö Citation","title":"Gradient-Based Feature Attribution for Survival Neural Networks","text":"use package research, please cite follows:","code":"@article{langbein2025grad,   title={Gradient-based Explanations for Deep Learning Survival Models},   author={Langbein, Sophie Hanna and Koenen, Niklas and Wright, Marvin N.},   journal={arXiv preprint arXiv:2502.04970},   year={2025} }"},{"path":"https://nkoenen.github.io/Survinng/reference/Survinng-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Survinng: Gradient-Based Feature Attribution for Survival Neural Networks ‚Äî Survinng-package","title":"Survinng: Gradient-Based Feature Attribution for Survival Neural Networks ‚Äî Survinng-package","text":"package implements model-specific, gradient-based feature attribution methods deep survival neural networks, including DeepHit, CoxTime, DeepSurv. accompanies ICML 2025 paper \"Gradient-based Explanations Deep Learning Survival Models\".","code":""},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/reference/Survinng-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Survinng: Gradient-Based Feature Attribution for Survival Neural Networks ‚Äî Survinng-package","text":"Maintainer: Niklas Koenen niklas.koenen@gmail.com (ORCID) Authors: Sophie Hanna Langbein (ORCID)","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/as.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert survival attribution results to a data.frame ‚Äî as.data.frame.surv_result","title":"Convert survival attribution results to a data.frame ‚Äî as.data.frame.surv_result","text":"function converts survival attribution results data frame format. can handle stacked non-stacked formats.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/as.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert survival attribution results to a data.frame ‚Äî as.data.frame.surv_result","text":"","code":"# S3 method for class 'surv_result' as.data.frame(x, ..., stacked = FALSE)  as.data.table.surv_result(x, ..., stacked = FALSE)"},{"path":"https://nkoenen.github.io/Survinng/reference/as.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert survival attribution results to a data.frame ‚Äî as.data.frame.surv_result","text":"x object class surv_result containing survival attribution results. ... Unused arguments. stacked Logical indicating whether convert stacked data frame, .e., attributions stacked top . Default FALSE.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a model ‚Äî explain","title":"Explain a model ‚Äî explain","text":"function generic method dispatches appropriate explain method based class model.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a model ‚Äî explain","text":"","code":"explain(   model,   data = NULL,   model_type = NULL,   baseline_hazard = NULL,   labtrans = NULL,   time_bins = NULL,   preprocess_fun = NULL,   postprocess_fun = NULL,   predict_fun = NULL )  # S3 method for class 'nn_module' explain(   model,   data,   model_type,   baseline_hazard = NULL,   labtrans = NULL,   time_bins = NULL,   preprocess_fun = NULL,   postprocess_fun = NULL,   predict_fun = NULL )  # S3 method for class 'extracted_survivalmodels_coxtime' explain(model, data, ...)  # S3 method for class 'extracted_survivalmodels_deephit' explain(model, data, ...)  # S3 method for class 'extracted_survivalmodels_deepsurv' explain(model, data, ...)"},{"path":"https://nkoenen.github.io/Survinng/reference/explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain a model ‚Äî explain","text":"model model object. data data frame matrix data explain model. model_type string specifying type survival model. Possible values \"coxtime\", \"deephit\", \"deepsurv\". baseline_hazard data frame containing baseline hazard. two columns: \"time\" \"hazard\". used \"coxtime\" \"deepsurv\" models. labtrans list containing transformation functions time variable. two elements: \"transform\" \"transform_inv\". highly experimental yet fully supported. time_bins numeric vector specifying time bins \"deephit\" model, e.g., c(0, 1, 2, 3). preprocess_fun function preprocess data making predictions, e.g., adding time variable coxtime model. argument highly experimental default values work cases. postprocess_fun function postprocess predictions making . argument highly experimental default values work. predict_fun function can used make predictions model. NULL, predict method model used. ... Unused arguments.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain a model ‚Äî explain","text":"object class explainer contains model, data, prediction function.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/extract_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model information from a survivalmodels object ‚Äî extract_model","title":"Extract model information from a survivalmodels object ‚Äî extract_model","text":"function extracts model information neural network trained survivalmodels package.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/extract_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model information from a survivalmodels object ‚Äî extract_model","text":"","code":"extract_model(x, path = NULL, num_basehazard = 200L)  # S3 method for class 'coxtime' extract_model(x, path = NULL, num_basehazard = 200L)  # S3 method for class 'deephit' extract_model(x, path = NULL, ...)  # S3 method for class 'deepsurv' extract_model(x, path = NULL, num_basehazard = 200L)"},{"path":"https://nkoenen.github.io/Survinng/reference/extract_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model information from a survivalmodels object ‚Äî extract_model","text":"x survivalmodels object, .e., survivalmodels::deephit, survivalmodels::coxtime, survivalmodels::deepsurv. path string specifying path save extracted model. NULL, model saved. Default NULL. num_basehazard integer specifying number points baseline hazard compute. Default 200L. argument used coxtime deepsurv models. ... Unused arguments.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/plot.surv_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for survival attribution results ‚Äî plot.surv_result","title":"Plot method for survival attribution results ‚Äî plot.surv_result","text":"function generates plot survival attribution results. can display attributions time instance feature. plot can customized show stacked non-stacked attributions, normalized values, sum attributions.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/plot.surv_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for survival attribution results ‚Äî plot.surv_result","text":"","code":"# S3 method for class 'surv_result' plot(x, ..., stacked = FALSE, normalize = FALSE, add_sum = FALSE)"},{"path":"https://nkoenen.github.io/Survinng/reference/plot.surv_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for survival attribution results ‚Äî plot.surv_result","text":"x object class surv_result containing survival attribution results. ... Unused arguments. stacked Logical indicating whether plot stacked attributions. Default FALSE. normalize Logical indicating whether normalize attribution sum attributions instance time. Default FALSE. add_sum Logical indicating whether add sum attributions plot. Default FALSE.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.explainer.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom print method for explainer objects ‚Äî print.explainer_coxtime","title":"Custom print method for explainer objects ‚Äî print.explainer_coxtime","text":"function prints summary explainer object.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.explainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom print method for explainer objects ‚Äî print.explainer_coxtime","text":"","code":"# S3 method for class 'explainer_coxtime' print(x, ...)  # S3 method for class 'explainer_deepsurv' print(x, ...)  # S3 method for class 'explainer_deephit' print(x, ...)"},{"path":"https://nkoenen.github.io/Survinng/reference/print.explainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom print method for explainer objects ‚Äî print.explainer_coxtime","text":"x object class 'explainer_coxtime', 'explainer_deepsurv', 'explainer_deephit'. ... Additional arguments (used).","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.extracted_survivalmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for extracted pycox survival model ‚Äî print.extracted_survivalmodels_coxtime","title":"Print method for extracted pycox survival model ‚Äî print.extracted_survivalmodels_coxtime","text":"Print method extracted pycox survival model","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.extracted_survivalmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for extracted pycox survival model ‚Äî print.extracted_survivalmodels_coxtime","text":"","code":"# S3 method for class 'extracted_survivalmodels_coxtime' print(x, ...)  # S3 method for class 'extracted_survivalmodels_deepsurv' print(x, ...)  # S3 method for class 'extracted_survivalmodels_deephit' print(x, ...)"},{"path":"https://nkoenen.github.io/Survinng/reference/print.extracted_survivalmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for extracted pycox survival model ‚Äî print.extracted_survivalmodels_coxtime","text":"x object class extracted_survivalmodels_coxtime, extracted_survivalmodels_deepsurv, extracted_survivalmodels_deephit. ... Additional arguments (used).","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.surv_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for surv_result objects ‚Äî print.surv_result","title":"Print function for surv_result objects ‚Äî print.surv_result","text":"Print function surv_result objects","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/print.surv_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for surv_result objects ‚Äî print.surv_result","text":"","code":"# S3 method for class 'surv_result' print(x, ...)"},{"path":"https://nkoenen.github.io/Survinng/reference/print.surv_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for surv_result objects ‚Äî print.surv_result","text":"x object class \"surv_result\" ... Additional arguments (used)","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/surv_grad.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Gradient of the Survival Function ‚Äî surv_grad","title":"Calculate the Gradient of the Survival Function ‚Äî surv_grad","text":"function calculates gradient survival function respect input features time points given instance. paper, referred \"Grad(t)\" method. shows sensitivity survival function changes input features specific time point.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/surv_grad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Gradient of the Survival Function ‚Äî surv_grad","text":"","code":"surv_grad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 50,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deepsurv' surv_grad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   dtype = \"float\",   ... )  # S3 method for class 'explainer_coxtime' surv_grad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deephit' surv_grad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   dtype = \"float\",   ... )"},{"path":"https://nkoenen.github.io/Survinng/reference/surv_grad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Gradient of the Survival Function ‚Äî surv_grad","text":"exp object class explainer_deepsurv, explainer_coxtime, explainer_deephit. target character string indicating target output. DeepSurv CoxTime, can either \"survival\" (default), \"cum_hazard\", \"hazard\". DeepHit, can \"survival\" (default), \"cif\", \"pmf\". instance integer specifying instance gradient calculated. 1 number instances dataset. times_input logical value indicating whether gradient multiplied input. paper, variant referred \"GxI(t)\". batch_size integer specifying batch size processing. default 1000. value describes number instances within one batch final number rows batch. example, CoxTime replicates instance time point. dtype character string indicating data type tensors. can either \"float\" (default) \"double\". include_time logical value indicating whether include time points output. relevant CoxTime ignored DeepSurv DeepHit. ... Unused arguments.","code":""},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/reference/surv_gradSHAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the GradSHAP values of the Survival Function ‚Äî surv_gradSHAP","title":"Calculate the GradSHAP values of the Survival Function ‚Äî surv_gradSHAP","text":"function calculates GradSHAP values survival function respect input features time points given instance. paper, referred \"GradSHAP(t)\" method. fast model-specific method calculating Shapley values deep survival model.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/surv_gradSHAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the GradSHAP values of the Survival Function ‚Äî surv_gradSHAP","text":"","code":"surv_gradSHAP(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 50,   num_samples = 10,   data_ref = NULL,   dtype = \"float\",   replace = TRUE,   include_time = FALSE )  # S3 method for class 'explainer_deepsurv' surv_gradSHAP(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 50,   num_samples = 10,   data_ref = NULL,   dtype = \"float\",   replace = TRUE,   ... )  # S3 method for class 'explainer_coxtime' surv_gradSHAP(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 50,   num_samples = 10,   data_ref = NULL,   dtype = \"float\",   replace = TRUE,   include_time = FALSE )  # S3 method for class 'explainer_deephit' surv_gradSHAP(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 50,   num_samples = 10,   data_ref = NULL,   dtype = \"float\",   replace = TRUE,   ... )"},{"path":"https://nkoenen.github.io/Survinng/reference/surv_gradSHAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the GradSHAP values of the Survival Function ‚Äî surv_gradSHAP","text":"exp object class explainer_deepsurv, explainer_coxtime, explainer_deephit. target character string indicating target output. DeepSurv CoxTime, can either \"survival\" (default), \"cum_hazard\", \"hazard\". DeepHit, can \"survival\" (default), \"cif\", \"pmf\". instance integer specifying instance GradSHAP values calculated. 1 number instances dataset. times_input logical value indicating whether GradSHAP values multiplied input. batch_size integer specifying batch size processing. default 1000. value describes number instances within one batch final number rows batch. example, CoxTime replicates instance time point. n integer specifying number samples used approximating integral. default 50. num_samples integer specifying number samples used baseline distribution. default 10. data_ref reference dataset sampling. NULL, reference dataset taken input data model. dataset contain number features input data. dtype character string indicating data type tensors. can either \"float\" (default) \"double\". replace logical value indicating whether sample baseline distribution replacement. default TRUE. include_time logical value indicating whether calculate GradSHAP also time point. relevant CoxTime ignored DeepSurv DeepHit. default FALSE. ... Unused arguments. #' @return Returns object class surv_result.","code":""},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/reference/surv_intgrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Integrated Gradients of the Survival Function ‚Äî surv_intgrad","title":"Calculate the Integrated Gradients of the Survival Function ‚Äî surv_intgrad","text":"function calculates integrated gradients survival function respect input features time points given instance. paper, referred \"IntGrad(t)\" method. shows attributions input features target function respect reference input.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/surv_intgrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Integrated Gradients of the Survival Function ‚Äî surv_intgrad","text":"","code":"surv_intgrad(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 50,   n = 10,   x_ref = NULL,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deepsurv' surv_intgrad(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 10,   x_ref = NULL,   dtype = \"float\",   ... )  # S3 method for class 'explainer_coxtime' surv_intgrad(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 10,   x_ref = NULL,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deephit' surv_intgrad(   exp,   target = \"survival\",   instance = 1,   times_input = TRUE,   batch_size = 1000,   n = 10,   x_ref = NULL,   dtype = \"float\",   ... )"},{"path":"https://nkoenen.github.io/Survinng/reference/surv_intgrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Integrated Gradients of the Survival Function ‚Äî surv_intgrad","text":"exp object class explainer_deepsurv, explainer_coxtime, explainer_deephit. target character string indicating target output. DeepSurv CoxTime, can either \"survival\" (default), \"cum_hazard\", \"hazard\". DeepHit, can \"survival\" (default), \"cif\", \"pmf\". instance integer specifying instance integrated gradients calculated. 1 number instances dataset. times_input logical value indicating whether integrated gradients multiplied input. Default TRUE. batch_size integer specifying batch size processing. default 1000. value describes number instances within one batch final number rows batch. example, CoxTime replicates instance time point. n integer specifying number approximation points integral calculation. Default 10. x_ref reference input integrated gradients. NULL (default), mean input data used. dimensions input data. dtype character string indicating data type tensors. can either \"float\" (default) \"double\". include_time logical value indicating whether include attributions time points. relevant CoxTime ignored DeepSurv DeepHit. ... Unused arguments.","code":""},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/reference/surv_smoothgrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the SmoothGrad values of the Survival Function ‚Äî surv_smoothgrad","title":"Calculate the SmoothGrad values of the Survival Function ‚Äî surv_smoothgrad","text":"function calculates SmoothGrad values survival function respect input features time points given instance. paper, referred \"SG(t)\" method. shows smoothed sensitivity survival function changes input features specific time point.","code":""},{"path":"https://nkoenen.github.io/Survinng/reference/surv_smoothgrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the SmoothGrad values of the Survival Function ‚Äî surv_smoothgrad","text":"","code":"surv_smoothgrad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 50,   n = 10,   noise_level = 0.1,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deepsurv' surv_smoothgrad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   n = 10,   noise_level = 0.1,   dtype = \"float\",   ... )  # S3 method for class 'explainer_coxtime' surv_smoothgrad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   n = 10,   noise_level = 0.1,   dtype = \"float\",   include_time = FALSE )  # S3 method for class 'explainer_deephit' surv_smoothgrad(   exp,   target = \"survival\",   instance = 1,   times_input = FALSE,   batch_size = 1000,   n = 10,   noise_level = 0.1,   dtype = \"float\",   ... )"},{"path":"https://nkoenen.github.io/Survinng/reference/surv_smoothgrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the SmoothGrad values of the Survival Function ‚Äî surv_smoothgrad","text":"exp object class explainer_deepsurv, explainer_coxtime, explainer_deephit. target character string indicating target output. DeepSurv CoxTime, can either \"survival\" (default), \"cum_hazard\", \"hazard\". DeepHit, can \"survival\" (default), \"cif\", \"pmf\". instance integer specifying instance SmoothGrad calculated. 1 number instances dataset. times_input logical value indicating whether SmoothGrad multiplied input. paper, variant referred \"SGxI(t)\". batch_size integer specifying batch size processing. default 1000. value describes number instances within one batch final number rows batch. example, CoxTime replicates instance time point. n integer specifying number noise samples added input features. default 10. noise_level numeric value specifying level Gaussian noise added input features. default 0.1. dtype character string indicating data type tensors. can either \"float\" (default) \"double\". include_time logical value indicating whether also calculate gradients respect time. relevant CoxTime ignored DeepSurv DeepHit. ... Unused arguments.","code":""},{"path":[]},{"path":"https://nkoenen.github.io/Survinng/news/index.html","id":"survinng-001","dir":"Changelog","previous_headings":"","what":"Survinng 0.0.1","title":"Survinng 0.0.1","text":"Initial release part ICML‚Äô25 paper Gradient-based Explanations Deep Learning Survival Models","code":""}]
